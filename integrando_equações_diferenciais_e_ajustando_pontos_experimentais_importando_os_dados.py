# -*- coding: utf-8 -*-
"""Integrando_equações_diferenciais_e_ajustando_pontos_experimentais_importando_os_dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CLjNQlHlQX5x2t4p6kGwhvw6otgwTeXV

[View in Colaboratory](https://colab.research.google.com/github/marcelcerri/Integra-o-ordens-de-rea-o/blob/master/Integrando_equa%C3%A7%C3%B5es_diferenciais_e_ajustando_pontos_experimentais_importando_os_dados.ipynb)

**Integrando equações diferenciais e ajuste de pontos experimentais completo**
"""

#Importação todos os pacotes utilizados
import pandas as pd
from google.colab import files
import io
from scipy import stats
from scipy.interpolate import *
from scipy.integrate import odeint
from scipy.optimize import curve_fit
import numpy as np
import matplotlib.pyplot as plt

#carregar o arquivo em csv
uploaded = files.upload()

#verificação do upload
for fn in uploaded.keys():
  print('O arquivo "{name}" com tamanho de {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

#transformando o arquivo csv em data frame
calibracao_df = pd.read_csv(io.StringIO(uploaded['dado_primeira_ordem.csv'].decode('utf-8')))

#impressão do arquivo em data frame
calibracao_df

#transformando data frame em vetor
calibracao_np = calibracao_df.values

#impressão do vetor
calibracao_np

#vetor do eixo x
t = calibracao_np[:,0]
print(t)

#vetor do eixo y
data_ca = calibracao_np[:,1]
print(data_ca)

def secondorder(Ca,t, k):
  return -k*Ca**2

def y(t, k, Ca0):
  y = odeint(secondorder, Ca0, t, args=(k,))
  return y.ravel()

popt, cov = curve_fit(y, t, data_ca, [20, 1])
a_opt, y0_opt = popt
print(y)

print("a = %g" % a_opt)
print("y0 = %g" % y0_opt)

import matplotlib.pyplot as plt
plt.plot(t, data_ca, '.',
         t, y(t, a_opt, y0_opt), '-')
plt.gcf().set_size_inches(11, 7)
plt.savefig('out.png', dpi=96)
plt.show()

y = odeint(secondorder, y0_opt, t, args=(a_opt,))
#guardando as informações e salvando em txt
data = np.vstack((t, y.T))
data = data.T
print(data)

#salvando em csv
df = pd.DataFrame(data)
df.to_csv("data.csv")
files.download('data.csv')
print(df)

